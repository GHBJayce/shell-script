#!/usr/bin/env bash

#/ command: git:pull: "git pull script command."
#/ usage: rerun git:pull [ --directory <origin>] [ --branch <>] [ --remote <origin>]
#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: DIRECTORY BRANCH REMOTE

. "$RERUN_MODULE_DIR/lib/functions.sh" "pull" || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

set -o errexit -o nounset -o pipefail

rerun_options_parse "$@"

# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -


gitDirectory=$(getCurrentDirPathByName "$DIRECTORY")
remote=$REMOTE
branch=$(getCurrentBranchByName "$BRANCH")

function pullBranch()
{
    if [ `isCleanGitStatus` -eq 0 ]; then
        rerun_log error 'The current branch is not clean, please handle it before operation.'
        exit 1
    fi

    remoteBranch=$1
    branch=${remoteBranch/${remote}\//}
    echo "Switching branch: ${branch}"
    res=$(git checkout -b $branch $remoteBranch 2>&1 &)
    if [[ $res =~ 'Switched to a new branch' ]]; then
        rerun_log info 'Create a new branch.'
        return
    elif [[ $res =~ 'already exists' ]]; then
        res=$(git checkout $branch 2>&1)
    fi

    pullSingleBranch $branch $remote
}

function pullSingleBranch()
{
    remote=$2
    branch=$1

    echo "Updating branch: ${remote}/${branch}"
    if [ `hasRemoteGitBranch "$branch" "$remote"` -eq 0 ]; then
        rerun_log warn 'No find remote branch.'
        return
    fi
    if [ `gitBranchWaitPullCount "$branch" "$remote"` -eq 0 ]; then
        rerun_log warn 'Current branch already latest.'
        return
    fi

    res=$(git pull ${remote} ${branch} 2>&1 &)
    if [[ $res =~ 'Already up to date' ]]; then
        rerun_log warn 'Already up to date.'
    elif [[ $res =~ 'Updating' ]]; then
        rerun_log info 'Pull successful.'
    elif [[ $res =~ "couldn't find remote" ]]; then
        rerun_log error "Couldn't find remote."
    elif [[ $res =~ 'Automatic merge failed' || $res =~ 'Exiting because of an unresolved conflict' ]]; then
        rerun_log error 'Has conflicts, fix and then commit the result.'
    else
        res=$(cat <<- EOF
Pull failed: $res
EOF
)
        rerun_log error $res
    fi
}

rerun_include_sh "$RERUN_MODULE_DIR/commands/pull/main.sh"

# Done. Exit with last command exit status.
exit $?

